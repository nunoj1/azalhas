// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tournaments {
  id                 Int               @id @default(autoincrement())
  tournamentName     String
  startDate          DateTime
  tournamentFinished Boolean           @default(false)
  teams              TournamentTeams[]
  games              Games[]           @relation("GameTournament")
}

model TournamentTeams {
  id           Int         @id @default(autoincrement())
  tournamentId Int
  teamId       Int
  tournament   Tournaments @relation(fields: [tournamentId], references: [id])
  team         Teams       @relation(fields: [teamId], references: [id])
}

model Teams {
  id          Int               @id @default(autoincrement())
  name        String
  shortName   String
  picture     String?
  tournaments TournamentTeams[]
  homeGames   Games[]           @relation(name: "Home Team")
  awayGames   Games[]           @relation(name: "Away Team")
}

model Games {
  id           Int          @id @default(autoincrement())
  date         DateTime
  location     String?
  team1Id      Int
  team2Id      Int
  team1        Teams        @relation(fields: [team1Id], references: [id], name: "Home Team")
  team2        Teams        @relation(fields: [team2Id], references: [id], name: "Away Team")
  team1Result  Int?
  team2Result  Int?
  tournamentId Int?
  tournament   Tournaments? @relation("GameTournament", fields: [tournamentId], references: [id])
  MainEvents   MainEvents[]
}

model MainEvents {
  id           Int        @id @default(autoincrement())
  date         DateTime
  title        String
  categoryId   Int
  category     Categories @relation(fields: [categoryId], references: [id])
  gameId       Int?
  game         Games?     @relation(fields: [gameId], references: [id])
  realtedPosts Posts[]
}

model Categories {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  mainEvents MainEvents[]
  Posts      Posts[]
}

model Posts {
  id           Int         @id @default(autoincrement())
  title        String
  body         String
  date         DateTime
  categoryId   Int
  category     Categories  @relation(fields: [categoryId], references: [id])
  mainEventsId Int?
  MainEvents   MainEvents? @relation(fields: [mainEventsId], references: [id])
}
